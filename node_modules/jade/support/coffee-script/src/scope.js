(function() {
  var Scope, extend, last, _ref;
  _ref = require('./helpers'), extend = _ref.extend, last = _ref.last;
  exports.Scope = Scope = (function() {
    Scope.root = null;
    function Scope(parent, expressions, method) {
      this.parent = parent;
      this.expressions = expressions;
      this.method = method;
      this.variables = {
        'arguments': 'arguments'
      };
      if (this.parent) {
        this.garbage = this.parent.garbage;
      } else {
        this.garbage = [];
        Scope.root = this;
      }
    }
    Scope.prototype.startLevel = function() {
      return this.garbage.push([]);
    };
    Scope.prototype.endLevel = function() {
      var name, vars, _i, _len, _ref2, _results;
      vars = this.variables;
      _ref2 = this.garbage.pop();
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        name = _ref2[_i];
        if (vars[name] === 'var') {
          _results.push((vars[name] = 'reuse'));
        }
      }
      return _results;
    };
    Scope.prototype.find = function(name, options) {
      if (this.check(name, options)) {
        return true;
      }
      this.variables[name] = 'var';
      return false;
    };
    Scope.prototype.any = function(fn) {
      var k, v, _ref2;
      _ref2 = this.variables;
      for (v in _ref2) {
        k = _ref2[v];
        if (fn(v, k)) {
          return true;
        }
      }
      return false;
    };
    Scope.prototype.parameter = function(name) {
      return this.variables[name] = 'param';
    };
    Scope.prototype.check = function(name, options) {
      var immediate, _ref2;
      immediate = Object.prototype.hasOwnProperty.call(this.variables, name);
      if (immediate || (options != null ? options.immediate : void 0)) {
        return immediate;
      }
      return !!((_ref2 = this.parent) != null ? _ref2.check(name) : void 0);
    };
    Scope.prototype.temporary = function(type, index) {
      if (type.length > 1) {
        return '_' + type + (index > 1 ? index : '');
      } else {
        return '_' + (index + parseInt(type, 36)).toString(36).replace(/\d/g, 'a');
      }
    };
    Scope.prototype.freeVariable = function(type) {
      var index, temp;
      index = 0;
      while (this.check(temp = this.temporary(type, index)) && this.variables[temp] !== 'reuse') {
        index++;
      }
      this.variables[temp] = 'var';
      if (this.garbage.length) {
        last(this.garbage).push(temp);
      }
      return temp;
    };
    Scope.prototype.assign = function(name, value) {
      return this.variables[name] = {
        value: value,
        assigned: true
      };
    };
    Scope.prototype.hasDeclarations = function(body) {
      return body === this.expressions && this.any(function(k, val) {
        return val === 'var' || val === 'reuse';
      });
    };
    Scope.prototype.hasAssignments = function(body) {
      return body === this.expressions && this.any(function(k, val) {
        return val.assigned;
      });
    };
    Scope.prototype.declaredVariables = function() {
      var key, val;
      return ((function() {
        var _ref2, _results;
        _ref2 = this.variables;
        _results = [];
        for (key in _ref2) {
          val = _ref2[key];
          if (val === 'var' || val === 'reuse') {
            _results.push(key);
          }
        }
        return _results;
      }).call(this)).sort();
    };
    Scope.prototype.assignedVariables = function() {
      var key, val, _ref2, _results;
      _ref2 = this.variables;
      _results = [];
      for (key in _ref2) {
        val = _ref2[key];
        if (val.assigned) {
          _results.push("" + key + " = " + val.value);
        }
      }
      return _results;
    };
    Scope.prototype.compiledDeclarations = function() {
      return this.declaredVariables().join(', ');
    };
    Scope.prototype.compiledAssignments = function() {
      return this.assignedVariables().join(', ');
    };
    return Scope;
  })();
}).call(this);
